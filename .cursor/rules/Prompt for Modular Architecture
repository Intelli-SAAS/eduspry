Prompt for Modular Architecture :

Great! I’ll generate a comprehensive AI prompt that covers the full architecture of your EduSpry SaaS platform—including onboarding, modular features, user roles, and security. This prompt will be structured to let you implement one module at a time using a generative AI while staying aligned with the overall system design.

I’ll let you know when it’s ready for your review.


# EduSpry Courses Module

The **Courses Module** enables teachers and administrators to create, configure, and manage courses within each tenant’s context, while allowing students to browse and enroll in them.  In this multi-tenant SaaS architecture, each table includes a `tenant_id` column for isolation.  We enable PostgreSQL Row-Level Security (RLS) on all tables and write policies so that users only see or modify rows belonging to their own tenant.  For example, one policy can compare `tenant_id` to a `tenant_id` claim in the user’s JWT (e.g. `(auth.jwt()->'app_metadata'->>'tenant_id')::uuid = tenant_id`).  We also use custom JWT claims (e.g. `role`) to enforce role-based access.  Supabase’s documentation suggests adding a `user_role` claim via an Auth Hook and referencing it in RLS policies for RBAC.

* **Teacher (Creator)**: Can create, update, and delete courses for their institution (tenant).  Teachers can organize course structure and schedule content.
* **Student (Consumer)**: Can view available courses and enroll in electives for which they meet prerequisites.
* **Admin/Principal**: Has full control over courses and enrollments for the tenant.
* **Feature Flag (Subscription)**: The entire Courses UI/API is only enabled if the tenant has subscribed to this module.  We track this in a `tenant_modules` table.

Below is a scaffolding of the database schema, RLS policies, and Next.js frontend for the Courses Module.

## Database Schema (Supabase SQL)

We define tenant-scoped tables in Supabase with a `tenant_id` field.  For brevity we assume a `tenants` table and a `profiles` (user profile) table already exist.  The `courses` table stores course metadata; `course_enrollments` links students to courses; and `tenant_modules` tracks which modules a tenant has enabled (for feature gating).  Enable RLS on each table as noted.  For example:

```sql
-- Courses table (one row per course)
CREATE TABLE IF NOT EXISTS public.courses (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  tenant_id UUID NOT NULL REFERENCES public.tenants(id),
  teacher_id UUID NOT NULL REFERENCES public.profiles(id),  -- the creator/owner of the course
  name TEXT NOT NULL,
  description TEXT,
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);
ALTER TABLE public.courses ENABLE ROW LEVEL SECURITY;

-- Enrollment table (students enrolling in courses)
CREATE TABLE IF NOT EXISTS public.course_enrollments (
  id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
  tenant_id UUID NOT NULL REFERENCES public.tenants(id),
  course_id UUID NOT NULL REFERENCES public.courses(id) ON DELETE CASCADE,
  student_id UUID NOT NULL REFERENCES public.profiles(id),
  enrolled_at TIMESTAMPTZ NOT NULL DEFAULT NOW(),
  UNIQUE(course_id, student_id)
);
ALTER TABLE public.course_enrollments ENABLE ROW LEVEL SECURITY;

-- Tenant modules table (which features/subscriptions a tenant has)
CREATE TABLE IF NOT EXISTS public.tenant_modules (
  id SERIAL PRIMARY KEY,
  tenant_id UUID NOT NULL REFERENCES public.tenants(id),
  module_name TEXT NOT NULL,       -- e.g. 'courses', 'attendance', etc.
  enabled BOOLEAN NOT NULL DEFAULT true,
  subscription_plan TEXT,          -- e.g. plan tier name
  created_at TIMESTAMPTZ NOT NULL DEFAULT NOW()
);
ALTER TABLE public.tenant_modules ENABLE ROW LEVEL SECURITY;
```

Each table’s `tenant_id` ensures multi-tenancy.  (As one best practice, we follow Supabase guidance and **enable RLS on all exposed tables**.)  We would also have a `profiles` table mapping `auth.users.id` to `tenant_id` and `role`, updated via an Auth hook so that `tenant_id` and `role` appear in `auth.jwt()` claims.  This lets RLS policies use `auth.jwt()` to filter rows by tenant and role.

## Row-Level Security Policies

We write RLS policies so that users can only operate on rows for their own tenant and appropriate role.  Below are examples for key operations.  In all cases we extract the tenant from JWT claims `(auth.jwt()->'app_metadata'->>'tenant_id')::uuid`.  For roles, we assume a JWT claim `role` (e.g. `'student'`, `'teacher'`, `'admin'`).  For example:

```sql
-- Courses: any authenticated user in the tenant can LIST courses
CREATE POLICY "Tenant can view their courses"
  ON public.courses
  FOR SELECT
  USING (
    tenant_id = (auth.jwt() -> 'app_metadata' ->> 'tenant_id')::uuid
  );

-- Courses: only teachers or admins can CREATE a course
CREATE POLICY "Teachers/Admins can create courses"
  ON public.courses
  FOR INSERT
  WITH CHECK (
    tenant_id = (auth.jwt() -> 'app_metadata' ->> 'tenant_id')::uuid
    AND (auth.jwt() -> 'app_metadata' ->> 'role') IN ('teacher', 'admin')
  );

-- Courses: only teachers (or admins) of the tenant can UPDATE course details
CREATE POLICY "Teachers/Admins can update courses"
  ON public.courses
  FOR UPDATE
  USING (
    tenant_id = (auth.jwt() -> 'app_metadata' ->> 'tenant_id')::uuid
    AND (auth.jwt() -> 'app_metadata' ->> 'role') IN ('teacher', 'admin')
  )
  WITH CHECK (
    tenant_id = (auth.jwt() -> 'app_metadata' ->> 'tenant_id')::uuid
  );

-- Courses: only admins can DELETE courses
CREATE POLICY "Admins can delete courses"
  ON public.courses
  FOR DELETE
  USING (
    tenant_id = (auth.jwt() -> 'app_metadata' ->> 'tenant_id')::uuid
    AND (auth.jwt() -> 'app_metadata' ->> 'role') = 'admin'
  );

-- Enrollments: student can enroll or drop self in a course
CREATE POLICY "Students manage own enrollments"
  ON public.course_enrollments
  FOR INSERT, DELETE
  USING (
    tenant_id = (auth.jwt() -> 'app_metadata' ->> 'tenant_id')::uuid
    AND student_id = auth.uid()
  )
  WITH CHECK (
    tenant_id = (auth.jwt() -> 'app_metadata' ->> 'tenant_id')::uuid
    AND student_id = auth.uid()
  );

-- Enrollments: teachers/admins can view all enrollments in the tenant
CREATE POLICY "Teachers/Admins view enrollments"
  ON public.course_enrollments
  FOR SELECT
  USING (
    tenant_id = (auth.jwt() -> 'app_metadata' ->> 'tenant_id')::uuid
    AND (auth.jwt() -> 'app_metadata' ->> 'role') IN ('teacher', 'admin')
  );
```

These examples ensure **tenant isolation** and **role-based access**.  For instance, the policy “Tenant can view their courses” uses `(auth.jwt()->'app_metadata'->>'tenant_id')` to match rows.  Similarly, the “Teachers/Admins can create courses” policy allows only users whose role claim is `'teacher'` or `'admin'`, consistent with least-privilege RBAC.  This enforces that students cannot create or modify course records, while teachers manage them.

## API and Database Access

With Supabase, the frontend can use the Supabase client SDK to run queries against these tables.  For example, to fetch courses for the current tenant:

```typescript
import { supabase } from '@/lib/supabaseClient';

// Assume we have tenantId from the logged-in user’s context
async function loadCourses(tenantId: string) {
  const { data: courses, error } = await supabase
    .from('courses')
    .select('id, name, description, teacher_id, created_at')
    .eq('tenant_id', tenantId)
    .order('created_at', { ascending: false });
  return { courses, error };
}
```

Because RLS is enabled, even if we forget `.eq('tenant_id', ...)`, Supabase will automatically apply the RLS filter based on the user’s JWT tenant claim.  To create a new course from the frontend (for teachers), we might do:

```typescript
async function createCourse(tenantId: string, teacherId: string, name: string, desc: string) {
  const { data, error } = await supabase
    .from('courses')
    .insert({ tenant_id: tenantId, teacher_id: teacherId, name, description: desc });
  return { data, error };
}
```

Similarly, students can enroll in a course via:

```typescript
async function enrollInCourse(tenantId: string, courseId: string, studentId: string) {
  const { data, error } = await supabase
    .from('course_enrollments')
    .insert({ tenant_id: tenantId, course_id: courseId, student_id: studentId });
  return { data, error };
}
```

Note: In a production app, you would also handle errors (e.g. RLS rejects) and maybe use Supabase Edge Functions or Next.js API routes for sensitive operations (using the service role key).  But in many cases the client SDK with RLS suffices for CRUD operations.

## Frontend Structure (Next.js + Tailwind)

In the Next.js App Router (Next 13/14), we organize the Courses UI under a `courses` route.  For example:

```
app/
├─ dashboard/
│   ├─ courses/
│   │   ├─ page.tsx         # List of courses
│   │   ├─ new/
│   │   │   └─ page.tsx     # Form to create a course
│   │   └─ [id]/
│   │       └─ page.tsx     # Course detail page (e.g. students, edit)
│   └─ layout.tsx          # Dashboard layout (sidebar, etc.)
├─ layout.tsx             # Public layout / auth wrappers
├─ page.tsx               # Landing or login page
├─ components/
│   ├─ CourseList.tsx     # Component to render list of courses
│   └─ CourseForm.tsx     # Form component for adding/editing a course
└─ lib/
    └─ supabaseClient.ts  # Initializes Supabase client (using NEXT_PUBLIC keys)
```

In code:

```tsx
// lib/supabaseClient.ts
import { createClient } from '@supabase/supabase-js';

export const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
);
```

```tsx
// app/dashboard/courses/page.tsx
'use client';
import React, { useEffect, useState } from 'react';
import { supabase } from '@/lib/supabaseClient';

interface Course { id: string; name: string; description: string; }

export default function CoursesPage() {
  const [courses, setCourses] = useState<Course[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    async function fetchCourses() {
      const { data, error } = await supabase
        .from('courses')
        .select('id, name, description')
        .order('created_at', { ascending: false });
      if (data) setCourses(data as Course[]);
      setLoading(false);
    }
    fetchCourses();
  }, []);

  if (loading) return <p>Loading courses...</p>;
  return (
    <div className="p-4">
      <h1 className="text-2xl font-bold mb-4">Courses</h1>
      <ul className="space-y-2">
        {courses.map(course => (
          <li key={course.id} className="p-4 border rounded">
            <h2 className="text-xl">{course.name}</h2>
            <p>{course.description}</p>
          </li>
        ))}
      </ul>
    </div>
  );
}
```

The above server-side component (marked `'use client'` to allow supabase calls) fetches and displays all courses visible to the user.  Tailwind CSS classes are used for simple styling.

For adding a new course, we might have a form page:

```tsx
// app/dashboard/courses/new/page.tsx
'use client';
import React, { useState } from 'react';
import { supabase } from '@/lib/supabaseClient';

export default function NewCoursePage() {
  const [name, setName] = useState('');
  const [desc, setDesc] = useState('');
  const [error, setError] = useState<string | null>(null);

  async function handleSubmit(e: React.FormEvent) {
    e.preventDefault();
    const user = supabase.auth.user(); // assuming Auth Context or hook
    if (!user) return setError('Not authenticated');
    const tenantId = user.app_metadata?.tenant_id; // from JWT custom claims
    const teacherId = user.id;
    const { error } = await supabase
      .from('courses')
      .insert({ tenant_id: tenantId, teacher_id: teacherId, name, description: desc });
    if (error) setError(error.message);
    else {
      // Redirect or update state
    }
  }

  return (
    <div className="p-4">
      <h1 className="text-2xl font-bold mb-4">Create New Course</h1>
      <form onSubmit={handleSubmit} className="space-y-4">
        <input
          className="w-full p-2 border rounded"
          value={name} onChange={e => setName(e.target.value)}
          placeholder="Course Name"
          required
        />
        <textarea
          className="w-full p-2 border rounded"
          value={desc} onChange={e => setDesc(e.target.value)}
          placeholder="Description"
        />
        {error && <p className="text-red-500">{error}</p>}
        <button type="submit" className="px-4 py-2 bg-blue-600 text-white rounded">
          Save Course
        </button>
      </form>
    </div>
  );
}
```

**Folder Structure Summary:**

* `app/dashboard/courses/page.tsx`: Courses list.
* `app/dashboard/courses/new/page.tsx`: Course creation form (visible only to teachers).
* `app/dashboard/courses/[id]/page.tsx`: (Optional) Course detail/edit page.
* `components/`: Reusable components (e.g. `<CourseList>`, `<CourseForm>`).
* `lib/supabaseClient.ts`: Initializes the Supabase client.

Each file/component should import `supabase` and use it to query or mutate the `courses` and related tables.  We ensure the UI only shows actions based on role: e.g., the “Create Course” link/button is only rendered if the current user’s role is `teacher` or `admin`, which we can check from context or a React hook.

## Role-Based UI & Feature Gating

In the dashboard layout or navigation menu, only show the **Courses** section if the tenant has the module enabled.  For example:

```tsx
// Pseudo-code inside a dashboard nav component
const [modules] = useSupabase(() =>
  supabase.from('tenant_modules').select('module_name').eq('tenant_id', tenantId)
);
const hasCourses = modules?.some(m => m.module_name === 'courses');

return (
  <nav>
    {hasCourses && (
      <Link href="/dashboard/courses">
        <a>Courses</a>
      </Link>
    )}
    {/* other modules... */}
  </nav>
);
```

Likewise, within the Courses pages, check the user’s role (from JWT or user context) before showing edit/delete buttons:

```tsx
{userRole === 'teacher' || userRole === 'admin') && (
  <button onClick={() => editCourse(courseId)}>Edit</button>
)}
```

This aligns with the idea of **dynamic UI rendering** based on permissions.  If a student logs in, they will see the list of courses (to view or enroll) but will not see the “Create Course” button.  All these UI checks complement the backend RLS.  For instance, even if a malicious student tried to call the create-course API, the RLS policy “Teachers/Admins can create courses” would reject it because their JWT role is not `'teacher'`.

In summary, this **Courses Module** setup uses:

* A modular schema in Supabase (with `courses` and `course_enrollments` tables).
* Row-Level Security to enforce **tenant isolation** and **RBAC**.
* Next.js App Router pages and React components for the UI, guarded by role and subscription checks.
* Tailwind CSS for styling (classes shown in code above).
* Sample Supabase queries for CRUD operations.

This pattern can be extended to other modules (Attendance, Exams, etc.) by creating their own tables, RLS policies, and UI routes, reusing the same tenant/role context and feature-flagging approach.

**Sources:**  The implementation follows Supabase best practices for RLS and multi-tenancy, and aligns with EduSpry’s requirements that teachers create courses and students enroll in them. RLS ensures that each tenant’s data is strictly isolated. Role-based access (via JWT claims) is used per Supabase’s RBAC guide. All code snippets are illustrative of a production-ready module structure.
