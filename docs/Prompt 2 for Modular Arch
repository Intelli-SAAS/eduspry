Prompt 2 for Modular Arch :

Based on all your attached documents, design specifications, security guidelines, modular architecture, onboarding flow, and your goal of using **generative AI** to **implement one module at a time**, here is your **comprehensive AI prompt**.

---

# ✅ DETAILED AI PROMPT FOR CODE GENERATION

> 📌 **Use this prompt with any generative AI capable of multi-file and multi-modal output (e.g. GPT-4o, GitHub Copilot, or custom dev copilots)**

---

## 🎯 Objective:

Generate a complete implementation of each module of the **EduSpry SaaS Education Platform**—one module at a time—using a **modular monolith architecture** with **Next.js (App Router, TypeScript)** on the frontend and **Supabase** (PostgreSQL, Auth, Edge Functions) as the backend.

---

## 🧠 Platform Context:

* EduSpry is a multi-tenant SaaS platform for students, colleges, and institutions.
* It includes subscription-based access to independent education modules.
* Each tenant (individual or institution) subscribes to a plan and gains access to specific modules.
* Users belong to a tenant and assume a role: `student`, `teacher`, `principal`, or `admin`.

---

## 🏗️ Architecture Overview:

**Frontend**:

* Framework: Next.js (TypeScript, App Router)
* Styling: Tailwind CSS
* Folder structure: Modular route-based structure (e.g. `/dashboard/[module]/`)
* Feature access and role-based conditional rendering

**Backend (Supabase)**:

* Auth: Supabase Auth with JWT-based tenant\_id and role claims
* Data: PostgreSQL with Row-Level Security (RLS)
* Edge Functions: For background tasks like report generation, AI summarization

---

## 📦 Modules to Implement:

> Implement **one module at a time**, each fully decoupled and feature-flagged:

1. **Courses Module**
2. **Attendance Module**
3. **Proctored Exams Module**
4. **Live Classes Module**
5. **Admissions Module**
6. **Student Progress Monitoring Module**
7. **Performance Analytics Module**
8. **AI Assistant Module**

---

## ✅ Implementation Requirements (Apply to Each Module)

### 🔐 Multi-Tenant Setup

* Use `tenant_id` field in every core table.
* Enforce RLS for isolation using JWT claim: `(auth.jwt() -> 'app_metadata' ->> 'tenant_id')::uuid`

### 👥 Role-Based Access

* Roles: `student`, `teacher`, `admin`, `principal`
* Include `role` in JWT (via Supabase Auth hooks or metadata)
* Use `auth.jwt() -> 'app_metadata' ->> 'role'` for RLS + UI permissions

### 🎫 Subscription Feature Flag

* Table: `tenant_modules`
* Query: `SELECT * FROM tenant_modules WHERE tenant_id = $tenant_id AND module = 'courses' AND enabled = true`
* If not enabled → redirect or hide UI for that module

### 🧩 Supabase Tables

For each module:

* Design schema with `tenant_id`
* Enable RLS and write granular policies for each user role

### ⚙️ API Usage

* Use Supabase JS Client for CRUD
* Use Supabase Edge Functions for long-running / async tasks (e.g. AI assistant, reporting)

---

## 🖼️ UI/UX Requirements

* Module UI accessible under `/dashboard/[module]/`
* Navigation shows only subscribed modules
* Role-based conditional rendering

  * `student`: can view + enroll
  * `teacher`: can manage + create
  * `admin`: can manage all for tenant

---

## 🛠️ Frontend Folder Structure

```
/app
  /dashboard
    /[module]          → e.g., courses/
      /page.tsx        → List view
      /new/page.tsx    → Create form
      /[id]/page.tsx   → View/Edit item
/components
  /[Module]Card.tsx
  /[Module]Form.tsx
/lib
  /supabaseClient.ts
  /auth.ts
  /featureAccess.ts
```

---

## ✅ Development Goals for Each Module:

1. **Database**:

   * Tables with RLS and foreign keys
   * Insert sample rows (seeders)

2. **RLS Policies**:

   * Select / Insert / Update / Delete based on `tenant_id` and `role`

3. **UI Pages**:

   * List → Create → Detail/Edit
   * Reuse Tailwind UI components

4. **Supabase Queries**:

   * Read: `select * from ... where tenant_id = $current`
   * Write: `insert into ... where role IN ('teacher', 'admin')`

5. **Dashboard Integration**:

   * Show modules based on tenant feature flags
   * Redirect users if feature disabled

---

## 🔄 Reusable Patterns (Apply to Each Module):

| Concern       | Strategy                                          |
| ------------- | ------------------------------------------------- |
| Multi-tenancy | Use `tenant_id` in all queries + RLS              |
| Feature flags | Gate UI/API by `tenant_modules`                   |
| RBAC          | Use `auth.jwt()->'app_metadata'->>'role'`         |
| UI Guarding   | Hide buttons / routes using role + feature checks |
| Navigation    | Dynamically build from accessible modules         |

---

## 📁 Generate for Each Module:

* ✅ SQL schema (`schema.sql`)
* ✅ RLS policy definitions (`policies.sql`)
* ✅ Supabase API integration (insert/select/update/delete)
* ✅ Next.js UI for list/create/edit pages
* ✅ Dynamic navigation item visibility based on access
* ✅ Optional: Supabase Edge Function for module-specific async logic

---

## 🧪 First Module to Scaffold: `Courses Module`

> Please generate a complete implementation of the **Courses Module** for EduSpry as the first step, including:

* Supabase tables:

  * `courses`
  * `course_enrollments`
* RLS policies for roles (`student`, `teacher`, `admin`)
* Supabase queries: create, list, update, enroll
* Next.js UI:

  * `/dashboard/courses/page.tsx` — list of courses
  * `/dashboard/courses/new/page.tsx` — create course form
  * `/dashboard/courses/[id]/page.tsx` — course details
* Tailwind styling
* Dynamic feature access check from `tenant_modules`
* JWT claim usage for `tenant_id` and `role`

---

## 🛑 Output Format

Each response should include:

1. ✅ SQL schemas
2. ✅ RLS policies
3. ✅ TypeScript + Next.js frontend
4. ✅ Sample Supabase queries
5. ✅ Any reusable utility functions
6. ✅ Where needed, clearly commented TODOs

---

## 🧭 Next Steps After Courses Module

After Courses is done, regenerate the same for:

1. `Attendance Module`
2. `Proctored Exams Module`
3. etc.

---

Let me know if you’d like this prompt as a downloadable `.md` or `.txt` file for direct copy-paste into your project or AI tooling.
